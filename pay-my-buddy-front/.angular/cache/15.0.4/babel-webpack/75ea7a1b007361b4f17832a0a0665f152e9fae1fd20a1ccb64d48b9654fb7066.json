{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class JWTService {\n  constructor() {\n    this.token_key = 'token_key';\n  }\n  decodeToken(token) {\n    return JSON.parse(atob(token.split('.')[1]));\n  }\n  saveToken(token) {\n    localStorage.setItem(this.token_key, token);\n  }\n  getToken() {\n    return localStorage.getItem(this.token_key);\n  }\n  deleteToken() {\n    return localStorage.removeItem(this.token_key);\n  }\n  getBearerToken() {\n    const token = localStorage.getItem(this.token_key);\n    return token ? `Bearer ${token}` : undefined;\n  }\n  saveUser(token) {\n    if (token) {\n      this.saveToken(token);\n      const decoded = this.decodeToken(token);\n      return this.getUserFromToken();\n    }\n    throw Error('no token at createSession');\n  }\n  getUserFromToken() {\n    const token = this.getToken();\n    if (token) {\n      const decoded = this.decodeToken(token);\n      return {\n        role: decoded.auth[0].authority,\n        email: decoded.sub,\n        exp: decoded.exp\n      };\n    }\n    return null;\n  }\n  hasValidToken() {\n    const authUser = this.getUserFromToken();\n    if (authUser && authUser.role && authUser.email && authUser.exp) {\n      const isValid = Date.now() <= authUser.exp * 1000;\n      return isValid;\n    }\n    return false;\n  }\n}\nJWTService.ɵfac = function JWTService_Factory(t) {\n  return new (t || JWTService)();\n};\nJWTService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: JWTService,\n  factory: JWTService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAMA,OAAM,MAAOA,UAAU;EACrBC;IACA,cAAS,GAAG,WAAW;EADR;EAGfC,WAAW,CAACC,KAAa;IACvB,OAAOC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACH,KAAK,CAACI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAC9C;EAEAC,SAAS,CAACL,KAAa;IACrBM,YAAY,CAACC,OAAO,CAAC,IAAI,CAACC,SAAS,EAAER,KAAK,CAAC;EAC7C;EAEAS,QAAQ;IACN,OAAOH,YAAY,CAACI,OAAO,CAAC,IAAI,CAACF,SAAS,CAAC;EAC7C;EAEAG,WAAW;IACT,OAAOL,YAAY,CAACM,UAAU,CAAC,IAAI,CAACJ,SAAS,CAAC;EAChD;EAEAK,cAAc;IACZ,MAAMb,KAAK,GAAGM,YAAY,CAACI,OAAO,CAAC,IAAI,CAACF,SAAS,CAAC;IAClD,OAAOR,KAAK,GAAG,UAAUA,KAAK,EAAE,GAAGc,SAAS;EAC9C;EAEAC,QAAQ,CAACf,KAAa;IACpB,IAAIA,KAAK,EAAE;MACT,IAAI,CAACK,SAAS,CAACL,KAAK,CAAC;MACrB,MAAMgB,OAAO,GAAG,IAAI,CAACjB,WAAW,CAACC,KAAK,CAAC;MACvC,OAAO,IAAI,CAACiB,gBAAgB,EAAE;;IAEhC,MAAMC,KAAK,CAAC,2BAA2B,CAAC;EAC1C;EAEAD,gBAAgB;IACd,MAAMjB,KAAK,GAAG,IAAI,CAACS,QAAQ,EAAE;IAC7B,IAAIT,KAAK,EAAE;MACT,MAAMgB,OAAO,GAAG,IAAI,CAACjB,WAAW,CAACC,KAAK,CAAC;MACvC,OAAO;QACLmB,IAAI,EAAEH,OAAO,CAACI,IAAI,CAAC,CAAC,CAAC,CAACC,SAAmB;QACzCC,KAAK,EAAEN,OAAO,CAACO,GAAa;QAC5BC,GAAG,EAAER,OAAO,CAACQ;OACd;;IAEH,OAAO,IAAI;EACb;EAEAC,aAAa;IACX,MAAMC,QAAQ,GAAG,IAAI,CAACT,gBAAgB,EAAE;IACxC,IAAIS,QAAQ,IAAIA,QAAQ,CAACP,IAAI,IAAIO,QAAQ,CAACJ,KAAK,IAAII,QAAQ,CAACF,GAAG,EAAE;MAC/D,MAAMG,OAAO,GAAGC,IAAI,CAACC,GAAG,EAAE,IAAIH,QAAQ,CAACF,GAAG,GAAG,IAAI;MACjD,OAAOG,OAAO;;IAEhB,OAAO,KAAK;EACd;;AAtDW9B,UAAU;mBAAVA,UAAU;AAAA;AAAVA,UAAU;SAAVA,UAAU;EAAAiC,SAAVjC,UAAU;EAAAkC,YAFT;AAAM","names":["JWTService","constructor","decodeToken","token","JSON","parse","atob","split","saveToken","localStorage","setItem","token_key","getToken","getItem","deleteToken","removeItem","getBearerToken","undefined","saveUser","decoded","getUserFromToken","Error","role","auth","authority","email","sub","exp","hasValidToken","authUser","isValid","Date","now","factory","providedIn"],"sourceRoot":"","sources":["C:\\dev_school_projects\\projet6\\projet6OC\\pay-my-buddy-front\\src\\app\\core\\services\\jwt.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { AuthUser } from '../models/auth.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class JWTService {\r\n  constructor() {}\r\n  token_key = 'token_key';\r\n\r\n  decodeToken(token: string) {\r\n    return JSON.parse(atob(token.split('.')[1]));\r\n  }\r\n\r\n  saveToken(token: string) {\r\n    localStorage.setItem(this.token_key, token);\r\n  }\r\n\r\n  getToken() {\r\n    return localStorage.getItem(this.token_key);\r\n  }\r\n\r\n  deleteToken() {\r\n    return localStorage.removeItem(this.token_key);\r\n  }\r\n\r\n  getBearerToken() {\r\n    const token = localStorage.getItem(this.token_key);\r\n    return token ? `Bearer ${token}` : undefined;\r\n  }\r\n\r\n  saveUser(token: string): AuthUser | null {\r\n    if (token) {\r\n      this.saveToken(token);\r\n      const decoded = this.decodeToken(token);\r\n      return this.getUserFromToken();\r\n    }\r\n    throw Error('no token at createSession');\r\n  }\r\n\r\n  getUserFromToken(): AuthUser | null {\r\n    const token = this.getToken();\r\n    if (token) {\r\n      const decoded = this.decodeToken(token);\r\n      return {\r\n        role: decoded.auth[0].authority as string,\r\n        email: decoded.sub as string,\r\n        exp: decoded.exp,\r\n      };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  hasValidToken() {\r\n    const authUser = this.getUserFromToken();\r\n    if (authUser && authUser.role && authUser.email && authUser.exp) {\r\n      const isValid = Date.now() <= authUser.exp * 1000;\r\n      return isValid;\r\n    }\r\n    return false;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}