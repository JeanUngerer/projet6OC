{"ast":null,"code":"import { BehaviorSubject, ReplaySubject } from 'rxjs';\nimport { distinctUntilChanged, map, tap } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./jwt.service\";\nexport class AuthService {\n  constructor(http, jwt) {\n    this.http = http;\n    this.jwt = jwt;\n    this.currentUserSubject = new BehaviorSubject({});\n    this.currentUser = this.currentUserSubject.asObservable().pipe(distinctUntilChanged());\n    this.isAuthenticatedSubject = new ReplaySubject(1);\n    this.isAuthenticated = this.isAuthenticatedSubject.asObservable();\n    this.isLoggedIn();\n  }\n  login({\n    email,\n    password\n  }) {\n    return this.http.post(`${environment.apiUrl}/token`, {\n      username: email,\n      password\n    }).pipe(tap(r => this.createSession(r.Token)));\n  }\n  /**\r\n   * deletes JWT Token\r\n   * Resets isAuthenticated and CurrentUser observables\r\n   */\n  logout() {\n    this.jwt.deleteToken();\n    this.isAuthenticatedSubject.next(false);\n    this.currentUserSubject.next({});\n  }\n  /**\r\n   * saves User token and updates observables currentUserSubject and isAuthenticatedSubject\r\n   s  */\n  createSession(token) {\n    const authUser = this.jwt.saveUser(token);\n    if (authUser) {\n      this.currentUserSubject.next(authUser);\n      this.isAuthenticatedSubject.next(true);\n    }\n  }\n  /**\r\n   *\r\n   * @returns Observable<string | undefined> coresponding to current user Role\r\n   */\n  getRole() {\n    return this.currentUser.pipe(map(u => {\n      return u.role || this.jwt.getUserFromToken()?.role;\n    }));\n  }\n  /**\r\n   *\r\n   * @returns a boolean to indicate if a token that has not expired is saved in localStorage\r\n   * Real validity check on the token is done server-side\r\n   */\n  isLoggedIn() {\n    return this.jwt.hasValidToken();\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.JWTService));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAQA,eAAe,EAAcC,aAAa,QAAO,MAAM;AAC/D,SAASC,oBAAoB,EAAEC,GAAG,EAAEC,GAAG,QAAQ,gBAAgB;AAC/D,SAASC,WAAW,QAAQ,8BAA8B;;;;AAO1D,OAAM,MAAOC,WAAW;EAStBC,YAAoBC,IAAgB,EAAUC,GAAe;IAAzC,SAAI,GAAJD,IAAI;IAAsB,QAAG,GAAHC,GAAG;IARzC,uBAAkB,GAAG,IAAIT,eAAe,CAAW,EAAc,CAAC;IACnE,gBAAW,GAAG,IAAI,CAACU,kBAAkB,CACzCC,YAAY,EAAE,CACdC,IAAI,CAACV,oBAAoB,EAAE,CAAC;IAEvB,2BAAsB,GAAG,IAAID,aAAa,CAAU,CAAC,CAAC;IACvD,oBAAe,GAAG,IAAI,CAACY,sBAAsB,CAACF,YAAY,EAAE;IAGjE,IAAI,CAACG,UAAU,EAAE;EACnB;EAEAC,KAAK,CAAC;IAAEC,KAAK;IAAEC;EAAQ,CAAuC;IAC5D,OAAO,IAAI,CAACT,IAAI,CACbU,IAAI,CAAoB,GAAGb,WAAW,CAACc,MAAM,QAAQ,EAAE;MACtDC,QAAQ,EAAEJ,KAAK;MACfC;KACD,CAAC,CACDL,IAAI,CAACR,GAAG,CAAEiB,CAAC,IAAK,IAAI,CAACC,aAAa,CAACD,CAAC,CAACE,KAAK,CAAC,CAAC,CAAC;EAClD;EAEA;;;;EAIAC,MAAM;IACJ,IAAI,CAACf,GAAG,CAACgB,WAAW,EAAE;IACtB,IAAI,CAACZ,sBAAsB,CAACa,IAAI,CAAC,KAAK,CAAC;IACvC,IAAI,CAAChB,kBAAkB,CAACgB,IAAI,CAAC,EAAE,CAAC;EAClC;EAEA;;;EAGAJ,aAAa,CAACK,KAAa;IACzB,MAAMC,QAAQ,GAAoB,IAAI,CAACnB,GAAG,CAACoB,QAAQ,CAACF,KAAK,CAAC;IAC1D,IAAIC,QAAQ,EAAE;MACZ,IAAI,CAAClB,kBAAkB,CAACgB,IAAI,CAACE,QAAQ,CAAC;MACtC,IAAI,CAACf,sBAAsB,CAACa,IAAI,CAAC,IAAI,CAAC;;EAE1C;EAEA;;;;EAIAI,OAAO;IACL,OAAO,IAAI,CAACC,WAAW,CAACnB,IAAI,CAC1BT,GAAG,CAAE6B,CAAC,IAAI;MACR,OAAOA,CAAC,CAACC,IAAI,IAAI,IAAI,CAACxB,GAAG,CAACyB,gBAAgB,EAAE,EAAED,IAAI;IACpD,CAAC,CAAC,CACH;EACH;EAEA;;;;;EAKAnB,UAAU;IACR,OAAO,IAAI,CAACL,GAAG,CAAC0B,aAAa,EAAE;EACjC;;AA9DW7B,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAA8B,SAAX9B,WAAW;EAAA+B,YAFV;AAAM","names":["BehaviorSubject","ReplaySubject","distinctUntilChanged","map","tap","environment","AuthService","constructor","http","jwt","currentUserSubject","asObservable","pipe","isAuthenticatedSubject","isLoggedIn","login","email","password","post","apiUrl","username","r","createSession","Token","logout","deleteToken","next","token","authUser","saveUser","getRole","currentUser","u","role","getUserFromToken","hasValidToken","factory","providedIn"],"sourceRoot":"","sources":["C:\\dev_school_projects\\projet6\\projet6OC\\pay-my-buddy-front\\src\\app\\core\\services\\auth.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport {BehaviorSubject, Observable, ReplaySubject} from 'rxjs';\r\nimport { distinctUntilChanged, map, tap } from 'rxjs/operators';\r\nimport { environment } from 'src/environments/environment';\r\nimport { AuthUser } from '../models/auth.model';\r\nimport { JWTService } from './jwt.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthService {\r\n  private currentUserSubject = new BehaviorSubject<AuthUser>({} as AuthUser);\r\n  public currentUser = this.currentUserSubject\r\n    .asObservable()\r\n    .pipe(distinctUntilChanged());\r\n\r\n  private isAuthenticatedSubject = new ReplaySubject<boolean>(1);\r\n  public isAuthenticated = this.isAuthenticatedSubject.asObservable();\r\n\r\n  constructor(private http: HttpClient, private jwt: JWTService) {\r\n    this.isLoggedIn();\r\n  }\r\n\r\n  login({ email, password }: { email: string; password: string }) {\r\n    return this.http\r\n      .post<{ Token: string }>(`${environment.apiUrl}/token`, {\r\n        username: email,\r\n        password,\r\n      })\r\n      .pipe(tap((r) => this.createSession(r.Token)));\r\n  }\r\n\r\n  /**\r\n   * deletes JWT Token\r\n   * Resets isAuthenticated and CurrentUser observables\r\n   */\r\n  logout() {\r\n    this.jwt.deleteToken();\r\n    this.isAuthenticatedSubject.next(false);\r\n    this.currentUserSubject.next({});\r\n  }\r\n\r\n  /**\r\n   * saves User token and updates observables currentUserSubject and isAuthenticatedSubject\r\n   s  */\r\n  createSession(token: string) {\r\n    const authUser: AuthUser | null = this.jwt.saveUser(token);\r\n    if (authUser) {\r\n      this.currentUserSubject.next(authUser);\r\n      this.isAuthenticatedSubject.next(true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @returns Observable<string | undefined> coresponding to current user Role\r\n   */\r\n  getRole() {\r\n    return this.currentUser.pipe(\r\n      map((u) => {\r\n        return u.role || this.jwt.getUserFromToken()?.role;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @returns a boolean to indicate if a token that has not expired is saved in localStorage\r\n   * Real validity check on the token is done server-side\r\n   */\r\n  isLoggedIn() {\r\n    return this.jwt.hasValidToken();\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}